# ******************************************************************************
# Book        : 最短コースでわかる PyTorch ＆深層学習プログラミング
# Chapter     : 2 Pytorchの基本機能
# Theme       : 2 テンソル
# Creat Date  : 2022/1/30
# Final Update:
# URL         : https://github.com/makaishi2/pytorch_book_info
# Page        : P62 - P75
# ******************************************************************************


# ＜概要＞
# - Pytorchでデータを格納するテンソル型の作成方法とメソッドを確認する


# ＜目次＞
# 0 準備
# 1 0階テンソル(スカラー)の作成
# 2 1階テンソル(ベクトル)の作成
# 3 2階テンソル(行列)の作成
# 4 3階以上のテンソルの作成
# 5 整数型のテンソルを作る
# 6 テンソルの階数の変換
# 7 テンソルが持つ他の以外の属性
# 8 0階のテンソルにおけるitemメソッド
# 9 テンソルの数学関数
# 10 Numpy変数への変換


# 0 準備 ------------------------------------------------------------

# ライブラリ
import torch
import numpy as np


# 1 0階テンソル(スカラー)の作成 ---------------------------------------


# 0階テンソル（スカラー）
r0 = torch.tensor(1.0).float()

# 要素の確認
print(r0.data)
print(r0)


# 確認
# --- オブジェクトのデータ型の確認
# --- 要素のデータ型の確認
# --- 配列の大きさの確認
print(type(r0))
print(r0.dtype)
print(r0.shape)


# 2 1階テンソル(ベクトル)の作成 ---------------------------------------

# 1階テンソル（ベクトル）
# --- 直接作成
r1 = torch.tensor([1, 2, 3, 4, 5]).float()
print(r1)

# 1階テンソル（ベクトル）
# --- NumPyからテンソルに変換
r1_np = np.array([1, 2, 3, 4, 5])
r1 = torch.tensor(r1_np).float()
print(r1)

# 確認
# --- オブジェクトのデータ型の確認
# --- 要素のデータ型の確認
# --- 配列の大きさの確認
print(type(r1))
print(r1.dtype)
print(r1.shape)


# 3 2階テンソル(行列)の作成 ------------------------------------------

# ＜ポイント＞
# - 2階のテンソル(行列)は、1階のテンソル(ベクトル)をまとめて構造的に扱っている


# 2階のNmPy変数作成
# --- NumPyからテンソルに変換
r2_np = np.array([[1, 5, 6], [4, 3, 2]])
r2 = torch.tensor(r2_np).float()

# 確認
print(r2)
print(r2.shape)


# 4 3階以上のテンソルの作成 ------------------------------------------

# ＜ポイント＞
# - 3階のテンソルは、2階のテンソル(行列)をまとめて構造的に扱っている
# - 4階のテンソルは、3階のテンソルをまとめて構造的に扱っている


# 3階のテンソルの作成
# --- 乱数から生成する
torch.manual_seed(123)
r3 = torch.randn((3, 2, 2))

# 確認
print(r3.data)
print(r3.shape)


# 4階のテンソルの作成
r4 = torch.ones((2, 3, 2, 2))

# shapeを調べる
print(r4.data)
print(r4.shape)


# 5 整数型のテンソルを作る ------------------------------------------

# ＜ポイント＞
# - Pytorchではテンソルは多くの場合は浮動小数点(float32)で扱う
# - 例外として｢多値分類｣の損失関数では整数型を指定する必要がある


# テンソルの作成
# --- 浮動小数点で定義
r1 = torch.tensor([1.0, 2.0, 3.0, 4.0, 5.0])

# 確認
print(r1)
print(r1.dtype)

# テンソルを整数型に変換
r5 = r1.long()

# 確認
print(r5)
print(r5.dtype)


# 6 テンソルの階数の変換 ---------------------------------------------

# テンソルの作成
# --- 3階のテンソル
torch.manual_seed(123)
r3 = torch.randn((3, 2, 2))

# 2階化
# --- View関数の引数の数の階数に変換される
# --- 要素数に-1を指定すると、この数を自動調整する
r6 = r3.view(3, -1)

# 確認
print(r6.shape)
print(r6.data)

# 1階化
# --- View関数の引数の数の階数に変換される
# --- 要素数に-1を指定すると、この数を自動調整する
r7 = r3.view(-1)

# 確認
print(r7.shape)
print(r7.data)


# 7 テンソルが持つ他の以外の属性 ----------------------------------------------

# ＜ポイント＞
# - テンソルは数値以外にも微分やデバイスの属性情報も持っている


# テンソルの作成
r1 = torch.tensor([1.0, 2.0, 3.0, 4.0, 5.0])

# requires_grad属性
# --- 自動微分の設定
print('requires_grad: ', r1.requires_grad)

# device属性
# --- cpu / gpu
print('device: ', r1.device)


# 8 0階のテンソルにおけるitemメソッド -----------------------------------------

# ＜ポイント＞
# - 0階のテンソルのみitem()

# データ作成
# --- 0階テンソル（スカラー）
r0 = torch.tensor(1.0).float()

# 要素抽出
# --- スカラーテンソル(0階テンソル)に対してはitem関数で値を取り出せる
item = r0.item()

# 確認
print(type(item))
print(item)

# 1階以上のテンソルの場合はエラー
# r1 = torch.tensor([1.0, 2.0, 3.0, 4.0, 5.0])
# print(r1.item())

# 要素数が1つだけの1階テンソルはOK
# (2階以上でも同様)
t1 = torch.ones(1)

# 確認
print(t1.shape)
print(t1.item())


# 9 テンソルの数学関数 ---------------------------------------------

# ＜ポイント＞
# - Pytorchはテンソルを操作する数値演算のメソッドや関数も持っている
#   --- 以下ではmax()をのみを扱う


# 2階のNmPy変数作成
# --- NumPyからテンソルに変換
r2 = torch.tensor([[1, 5, 6], [4, 3, 2]])

# 確認
print(r2)

# 最大値の抽出
# --- メソッド
print(r2.max())

# 最大値の抽出
# --- 関数(torch.max())
# --- 2つめの引数はどの軸で集約するかを意味する
print(torch.max(r2, 1))

# 最大値のインデックスを取得
print(torch.max(r2, 1)[1])


# 10 Numpy変数への変換 ---------------------------------------------

# ＜ポイント＞
# - Numpy配列とテンソルの相互変換は頻繁に行われる
#   --- テンソルが持つデバイスなどの属性は失われる点に注意（数値のみ変換）


# テンソルの作成
r2 = torch.tensor([[1, 5, 6], [4, 3, 2]])

# NumPy化
r2_np = r2.data.numpy()

# type 確認
print(type(r2_np))
print(r2_np)
