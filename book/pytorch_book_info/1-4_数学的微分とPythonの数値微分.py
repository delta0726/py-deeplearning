# ******************************************************************************
# Book        : 最短コースでわかる PyTorch ＆深層学習プログラミング
# Chapter     : 1 ディープラーニングのためのPythonのツボ
# Theme       : 4 数学的微分とPythonの数値微分
# Creat Date  : 2022/1/30
# Final Update:
# URL         : https://github.com/makaishi2/pytorch_book_info
# Page        : P35 - P42 / P58 - P59
# ******************************************************************************


# ＜概要＞
# - ディープラーニングは数学的観点でいうと｢合成関数｣と｢微分｣で成り立っている
# - ｢損失｣という膨大なパラメータを持つ複雑な合成関数の微分計算から最適パラメータを求める
#   --- Pytorchは数値微分による微分計算を簡単にできる仕組みを内臓している


# ＜関数の関数＞
# - 引数に関数を受け取って、出力値が関数である関数を｢関数の関数｣という
#   --- ここでは例として｢関数を引数で受け取り、微分した結果を出力する関数｣を定義する
#   --- Pythonでは｢数値微分｣により実装する


# ＜目次＞
# 0 準備
# 1 数値微分の実装
# 2 数値微分の実行
# 3 シグモイド関数の微分


# 0 準備 ------------------------------------------------------------

# ライブラリ
import numpy as np
import matplotlib.pyplot as plt


# データ生成
# --- -2から+2の間で数列を生成
x = np.arange(-2, 2.1, 0.25)


# 1 数値微分の実装 ---------------------------------------------------

# ＜ポイント＞
# - 数値微分はある関数に対してhに非常に小さい値を入れた状態で近似式を計算することで算出する


# 関数定義：関数を数値微分する関数
# --- 引数で関数を受け取る
# --- diff()で数値微分を行う（関数内関数）
# --- 関数を出力値とする
def fdiff(f):
    def diff(x):
        h = 1e-6
        return (f(x + h) - f(x - h)) / (2 * h)
    return diff


# 2 数値微分の実行 ---------------------------------------------------

# 関数定義：元の関数
# --- y = 2x^2 + 2
def f(x):
    return (2 * x**2 + 2)


# yの算出
# --- y = 2x^2 + 2
y = f(x)

# fの微分結果の関数diffを取得
# --- 出力値は関数になっている
# --- 入力した関数を数値微分した関数に変換している（新しい関数が定義された）
diff = fdiff(f)

# 微分結果を計算
# --- 定義された新しい関数を数値(x)に適用
y_dash = diff(x)

# 結果確認
print(y_dash)

# プロット作成
plt.plot(x, y, label=r'y = f(x)', c='b')
plt.plot(x, y_dash, label=r"y = f '(x)", c='k')
plt.legend()
plt.show()


# 3 シグモイド関数の微分 -----------------------------------------------

# 関数定義：シグモイド関数
def g(x):
    return 1 / (1 + np.exp(-x))


# yの算出
# --- y = 1 / (1 + exp(-x))
y = g(x)

# gの微分結果の関数diffを取得
diff = fdiff(g)

# 微分結果を計算
# --- 定義された新しい関数を数値(x)に適用
y_dash = diff(x)

# 結果確認
print(y_dash)

# プロット作成
plt.plot(x, y, label=r'y = f(x)', c='b')
plt.plot(x, y_dash, label=r"y = f '(x)", c='k')
plt.legend()
plt.show()
