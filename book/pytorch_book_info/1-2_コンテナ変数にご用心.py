# ******************************************************************************
# Book        : 最短コースでわかる PyTorch ＆深層学習プログラミング
# Chapter     : 1 ディープラーニングのためのPythonのツボ
# Theme       : コンテナデータ型の変数にご用心
# Creat Date  : 2022/1/29
# Final Update:
# URL         : https://github.com/makaishi2/pytorch_book_info
# Page        : P25 - P30
# ******************************************************************************


# ＜概要＞
# - ｢参照｣と｢コピー｣の挙動の違いを理解する（リストでよく起こるエラー）
# - pytorchで扱うテンソルでも同様の間違いを犯しやすいため確認しておく
#   --- バグの温床になりやすいので、挙動がおかしい際には思い出すようにしたい


# ＜コンテナデーア型とは＞
# - リストやNumpy配列のように、名前から実際のデータにアクセスする際にインデックスを経由する必要のあるデータ


# ＜参考＞
# 6.1. コンテナデータ型
# - http://www.physics.okayama-u.ac.jp/~otsuki/lecture/CompPhys2/string/container.html


# ＜目次＞
# 0 準備
# 1 変数の参照
# 2 参照先の変数を修正
# 3 コピーで新しいオブジェクトを生成
# 4 テンソルをNumpy配列に変換
# 5 テンソルをNumpy配列にコピーして変換


# 0 準備 ----------------------------------------------------------------

# ライブラリ
import numpy as np
import torch


# 1 変数の参照 ----------------------------------------------------------

# ＜ポイント＞
# -


# データ格納
# --- Numpy配列を定義
x = np.array([5, 7, 9])

# 変数参照
# --- yはxを｢代入｣したのではなく、｢参照｣しているだけ
y = x

# 結果確認
# --- このとき実体は共通なまま
print(x)
print(y)


# 2 参照先の変数を修正 ----------------------------------------------------

# ＜ポイント＞
# - 代入は｢参照｣を意味するので、参照元/参照先のどちらかが変更されると影響を受けてしまう
#   --- P26の概念図とP27の説明が分かりやすい


# 実験1： xの特定要素の値を変更
x[1] = -1

# 結果確認
# --- yも連動して値が変わる
print(x)
print(y)


# 実験2： yの特定要素の値を変更
y[1] = -2

# 結果確認
# --- xも連動して値が変わる
print(x)
print(y)


# 3 コピーで新しいオブジェクトを生成 ----------------------------------------------

# ＜ポイント＞
# - コピー関数でオブジェクトを独立して作成しておけば影響を分断することができる


# オブジェクトのコピー
# --- yも同時に変化して困る場合は、代入時にcopy関数を利用する
x = np.array([5, 7, 9])
y = x.copy()

# 要素を変更
# --- すると、xの特定の要素値の変更がyに影響しなくなる
x[1] = -1
print(x)
print(y)


# 4 テンソルをNumpy配列に変換 ------------------------------------

# ＜ポイント＞
# - Pytorchでは独自のテンソル型を用いて演算を行う
#   --- Numpy配列への変換を行う際に、代入(参照)で処理することが多い
#   --- ｢参照｣なので、参照先の変更の影響を受ける点に注意する必要がある

# テンソルの生成
x1 = torch.ones(5)

# 結果確認
print(x1)

# Numpy配列に変換
# --- 以下のように代入(参照)によってNumpy配列を生成するのが通例
x2 = x1.data.numpy()

# 結果確認
print(x2)

# テンソルの要素を変更
# --- x1の値を変更
x1[1] = -1

# 結果確認
# --- 連動してx2の値も変わる
print(x1)
print(x2)


# 5 テンソルをNumpy配列にコピーして変換 ------------------------------------

# ＜ポイント＞
# - Pytorchでは独自のテンソル型を用いて演算を行う


# テンソルの生成
x1 = torch.ones(5)

# Numpy配列に変換
# --- 変換したものをコピーして新しいオブジェクトとして定義
x2 = x1.data.numpy().copy()

# テンソルの要素を変更
# --- x1の値を変更
x1[1] = -1

# 結果確認
# --- 要素変更の影響を受けない
print(x1)
print(x2)
