# ******************************************************************************
# Book        : 最短コースでわかる PyTorch ＆深層学習プログラミング
# Chapter     : 1 ディープラーニングのためのPythonのツボ
# Theme       : 3 数学上の合成関数とPythonの合成関数
# Creat Date  : 2022/1/29
# Final Update:
# URL         : https://github.com/makaishi2/pytorch_book_info
# Page        : P30 - P34
# ******************************************************************************


# ＜概要＞
# - ディープラーニングは膨大なパラメータを持つ複雑な合成関数
#   --合成関数の概念を数学面とPython実装の双方で理解しておく必要がある


# ＜目次＞
# 0 準備
# 1 数学関数をそのままPytnon関数として定義
# 2 数学関数を合成関数としてPytnon関数で定義


# 0 準備 -------------------------------------------------------------

# ライブラリ
import numpy as np
import matplotlib.pyplot as plt


# 1 数学関数をそのままPytnon関数として定義 --------------------------------

# ＜ポイント＞
# - Pythonで数式を表現する場合は関数で数式を実装するのが基本
# - Pythonでは実数を用いて関数を表現する
#   --- 数学のように解析的に処理するわけではない


# 関数定義
# --- 2X ^ 2 + 2
def f(x):
    return 2 * x ** 2 + 2


# データ生成
# --- -2から+2の間で数列を生成
x = np.arange(-2, 2.1, 0.25)
print(x)

# 関数適用
y = f(x)
print(y)

# プロット確認
plt.plot(x, y)
plt.show()


# 2 数学関数を合成関数としてPytnon関数で定義 --------------------------------

# ＜ポイント＞
# - 1つの数式を合成関数としてパイプライン的に定義することもできる
#   --- 以下の式は前述の数式(2X ^ 2 + 2)を定義している


# 3つの基本関数の定義
def f1(x):
    return (x ** 2)


def f2(x):
    return (x * 2)


def f3(x):
    return (x + 2)


# データ生成
# --- -2から+2の間で数列を生成
x = np.arange(-2, 2.1, 0.25)

# 合成関数の適用
# --- 順番に関数を適用するだけ
x1 = f1(x)
x2 = f2(x1)
y = f3(x2)

# 合成関数の値の確認
# --- ｢1 数学関数をそのままPytnon関数として定義｣と同じ結果
print(y)

# プロット確認
plt.plot(x, y)
plt.show()
